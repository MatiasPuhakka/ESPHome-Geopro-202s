esphome:
  name: geopro
  friendly_name: Geopro

esp32:
  board: esp32dev
  framework:
    type: esp-idf

logger:
  level: VERBOSE
  baud_rate: 0

globals:
  # Mittaukset
  - id: temp_outside
    type: float
    initial_value: "0"
  - id: temp_l1_room
    type: float
    initial_value: "0"
  - id: temp_l1_supply
    type: float
    initial_value: "0"
  - id: temp_free
    type: float
    initial_value: "0"
  - id: temp_tank_top_in
    type: float
    initial_value: "0"
  - id: temp_tank_top
    type: float
    initial_value: "0"
  - id: temp_tank_mid
    type: float
    initial_value: "0"
  - id: temp_tank_bottom
    type: float
    initial_value: "0"
  - id: temp_brine
    type: float
    initial_value: "0"
  - id: valve_l1
    type: float
    initial_value: "0"
  - id: valve_dhw
    type: float
    initial_value: "0"
  - id: hours_eh
    type: float
    initial_value: "0"
  - id: hours_comp
    type: float
    initial_value: "0"
  - id: status_word
    type: float
    initial_value: "0"
  # Bank 0x0C values
  - id: l1_minus20
    type: float
    initial_value: "0"
  - id: l1_zero
    type: float
    initial_value: "0"
  - id: l1_plus20
    type: float
    initial_value: "0"
  - id: l1_night_effect
    type: float
    initial_value: "0"
  - id: l1_min_limit
    type: float
    initial_value: "0"
  - id: l1_max_limit
    type: float
    initial_value: "0"
  - id: l1_autumn_dry
    type: float
    initial_value: "0"
  - id: l1_out_temp_delay
    type: float
    initial_value: "0"
  - id: l1_pre_increase
    type: float
    initial_value: "0"
  # Bank 0x2C values
  - id: l1_summer_close
    type: float
    initial_value: "0"
  # Control settings
  - id: hp_mode
    type: float
    initial_value: "0"
  - id: tank_min
    type: float
    initial_value: "0"
  - id: delay_time
    type: float
    initial_value: "0"
  - id: summer_temp
    type: float
    initial_value: "0"
  - id: winter_temp
    type: float
    initial_value: "0"
  # Additional settings
  - id: extra_heating
    type: float
    initial_value: "0"
  - id: extra_time
    type: float
    initial_value: "0"
  - id: comp_lock
    type: float
    initial_value: "0"
  - id: top_eh_diff
    type: float
    initial_value: "0"
  - id: bottom_diff
    type: float
    initial_value: "0"
  - id: top_diff
    type: float
    initial_value: "0"
  - id: dhw_pre
    type: float
    initial_value: "0"
  - id: dhw_lock
    type: float
    initial_value: "0"
  - id: brine_alert
    type: float
    initial_value: "0"

sensor:
  # Lämmityspiiri
  - platform: template
    name: "L1 -20°C"
    id: l1_minus20_point
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(l1_minus20);"
  - platform: template
    name: "L1 0°C"
    id: l1_zero_point
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(l1_zero);"
  - platform: template
    name: "L1 +20°C"
    id: l1_plus20_point
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(l1_plus20);"
  - platform: template
    name: "L1 yöalennus vaikutus"
    id: l1_night_reduction
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(l1_night_effect);"
  - platform: template
    name: "L1 minimiraja"
    id: l1_min_limit_point
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(l1_min_limit);"
  - platform: template
    name: "L1 maksimiraja"
    id: l1_max_limit_point
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(l1_max_limit);"
  - platform: template
    name: "L1 syyskuivaus"
    id: l1_autumn_dry_point
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(l1_autumn_dry);"
  - platform: template
    name: "L1 ulkolämpötilan hidastus"
    id: l1_outside_temp_delay
    unit_of_measurement: "min"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(l1_out_temp_delay);"
  - platform: template
    name: "L1 esikorotus"
    id: l1_pre_increase_point
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(l1_pre_increase);"
  - platform: template
    name: "L1 venttiilin kesäsulku"
    id: l1_summer_close_point
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(l1_summer_close);"

  # Lämpöpumppu
  - platform: template
    name: "ML ohjaus"
    id: hp_control_mode
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(hp_mode);"
  - platform: template
    name: "ML VaraajaAlaMin"
    id: tank_bottom_min
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(tank_min);"
  - platform: template
    name: "ML SV_viive"
    id: eh_delay
    unit_of_measurement: "min"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(delay_time);"
  - platform: template
    name: "ML VarYla Kesä"
    id: tank_top_summer
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(summer_temp);"
  - platform: template
    name: "ML VarYla Talvi"
    id: tank_top_winter
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(winter_temp);"
  - platform: template
    name: "ML Lisälämmitys"
    id: extra_heating_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(extra_heating);"
  - platform: template
    name: "ML Lisälämmitys aika"
    id: extra_heating_time
    unit_of_measurement: "min"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(extra_time);"
  - platform: template
    name: "ML Kompuran esto"
    id: compressor_lock_time
    unit_of_measurement: "min"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(comp_lock);"
  - platform: template
    name: "ML VarYlaEroSV"
    id: tank_top_eh_difference
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(top_eh_diff);"
  - platform: template
    name: "ML VaraajaAlaEro"
    id: tank_bottom_difference
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(bottom_diff);"
  - platform: template
    name: "ML VaraajaYläEro"
    id: tank_top_difference
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(top_diff);"
  - platform: template
    name: "ML JV esiavaus"
    id: dhw_pre_open
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(dhw_pre);"
  - platform: template
    name: "ML JV Esto"
    id: dhw_lock_time
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(dhw_lock);"
  - platform: template
    name: "ML Maaliuos hälytys"
    id: brine_alert_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(brine_alert);"

  # Mittaukset
  - platform: template
    name: "Ulkolämpötila"
    id: outside_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 2
    update_interval: 60s
    lambda: "return id(temp_outside);"
  - platform: template
    name: "L1 huone"
    id: l1_room_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 2
    update_interval: 60s
    lambda: "return id(temp_l1_room);"
  - platform: template
    name: "L1 menovesi"
    id: l1_supply_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 2
    update_interval: 60s
    lambda: "return id(temp_l1_supply);"
  - platform: template
    name: "Vapaa mittaus"
    id: free_measurement
    unit_of_measurement: "°C"
    accuracy_decimals: 2
    update_interval: 60s
    lambda: "return id(temp_free);"
  - platform: template
    name: "Varaaja ylä tulo"
    id: tank_top_input_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 2
    update_interval: 60s
    lambda: "return id(temp_tank_top_in);"
  - platform: template
    name: "Varaaja ylä"
    id: tank_top_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 2
    update_interval: 60s
    lambda: "return id(temp_tank_top);"
  - platform: template
    name: "Varaaja keski"
    id: tank_middle_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 2
    update_interval: 60s
    lambda: "return id(temp_tank_mid);"
  - platform: template
    name: "Varaaja ala"
    id: tank_bottom_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 2
    update_interval: 60s
    lambda: "return id(temp_tank_bottom);"
  - platform: template
    name: "Maaliuos"
    id: brine_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 2
    update_interval: 60s
    lambda: "return id(temp_brine);"

  # Venttiilit
  - platform: template
    name: "L1 Venttiili"
    id: l1_valve_pos
    unit_of_measurement: "%"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(valve_l1);"
  - platform: template
    name: "JV Venttiili"
    id: dhw_valve_pos
    unit_of_measurement: "%"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(valve_dhw);"

  # Käyntiajat
  - platform: template
    name: "Sähkövastus tunnit"
    id: eh_hours
    unit_of_measurement: "h"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(hours_eh);"
  - platform: template
    name: "Kompressori tunnit"
    id: compressor_hours
    unit_of_measurement: "h"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(hours_comp);"

  # Tila
  - platform: template
    name: "Tila Muuttuja"
    id: status
    accuracy_decimals: 0
    update_interval: 60s
    lambda: "return id(status_word);"

binary_sensor:
  - platform: template
    name: "Digi1"
    lambda: "return (int(id(status_word)) & 0x01) != 0;"

  - platform: template
    name: "Digi2"
    lambda: "return (int(id(status_word)) & 0x02) != 0;"

  - platform: template
    name: "Digi3"
    lambda: "return (int(id(status_word)) & 0x04) != 0;"

  - platform: template
    name: "Sähkövastus"
    lambda: "return (int(id(status_word)) & 0x08) != 0;"

  - platform: template
    name: "Kompressori"
    lambda: "return (int(id(status_word)) & 0x10) != 0;"

uart:
  tx_pin: GPIO1
  rx_pin: GPIO3
  baud_rate: 4800
  data_bits: 8
  parity: NONE
  stop_bits: 1
  rx_buffer_size: 512
  debug:
    direction: BOTH
    dummy_receiver: true
    after:
      timeout: 200ms
      bytes: 32
    sequence:
      - lambda: |-
          std::string dir = direction == uart::UART_DIRECTION_TX ? "TX" : "RX";
          std::string hex;
          for (int i = 0; i < bytes.size(); i++) {
            char buf[4];
            sprintf(buf, "%02X ", bytes[i]);
            hex += buf;
          }
          ESP_LOGD("raw", "%s: %s", dir.c_str(), hex.c_str());

          if (direction == uart::UART_DIRECTION_RX) {
            // Handle temperature, valve, and status readings (min 7 bytes)
            if (bytes.size() >= 7) {
              if (bytes[0] == 0x02 && bytes[2] == 0x04) {
                uint8_t id = bytes[4];

                // Handle different types of 0x04 responses
                if (id <= 0x22) {  // Temperature sensors
                  int16_t raw = (bytes[5] << 8) | bytes[6];
                  float temp = raw / 100.0f;
                  ESP_LOGD("temp", "Sensor 0x%02X temperature: %.2f°C", id, temp);

                  switch(id) {
                    case 0x12: id(temp_outside) = temp; break;     // Outside temperature
                    case 0x15: id(temp_l1_room) = temp; break;     // L1 room
                    case 0x14: id(temp_l1_supply) = temp; break;   // L1 supply
                    case 0x1B: id(temp_free) = temp; break;        // Free measurement
                    case 0x18: id(temp_tank_top_in) = temp; break; // Tank top input
                    case 0x21: id(temp_tank_top) = temp; break;    // Tank top
                    case 0x17: id(temp_tank_mid) = temp; break;    // Tank middle
                    case 0x22: id(temp_tank_bottom) = temp; break; // Tank bottom
                    case 0x19: id(temp_brine) = temp; break;       // Brine
                  }
                }
                else {  // Hours and status (these are raw values, not temperatures)
                  uint16_t value = (bytes[5] << 8) | bytes[6];
                  ESP_LOGD("status", "Status 0x%02X value: %d", id, value);

                  switch(id) {
                    case 0x3A: id(hours_eh) = value; break;      // Electric heater hours
                    case 0x3B: id(hours_comp) = value; break;    // Compressor hours
                    case 0x2D: id(status_word) = value; break;   // Status word
                  }
                }
              }
              else if (bytes[0] == 0x02 && bytes[2] == 0x03) {  // Valve positions
                uint8_t id = bytes[4];
                uint8_t value = bytes[5];
                ESP_LOGD("valve", "Valve 0x%02X position: %d%%", id, value);

                switch(id) {
                  case 0x31: id(valve_l1) = value; break;   // L1 valve
                  case 0x33: id(valve_dhw) = value; break;  // DHW valve
                }
              }
            }

            // Handle bank readings (min 32 bytes)
            if (bytes.size() >= 32 && bytes[0] == 0x02 && bytes[2] == 0x21) {
              uint8_t bank = bytes[4];

              if (bank == 0x0C) {
                // Parse bank 0x0C values
                int8_t val_minus20 = (int8_t)bytes[5];        // Offset 0
                int8_t val_zero = (int8_t)bytes[6];           // Offset 1
                int8_t val_plus20 = (int8_t)bytes[7];         // Offset 2
                int8_t val_night = (int8_t)bytes[10];         // Offset 5
                int8_t val_min = (int8_t)bytes[8];            // Offset 3
                int8_t val_max = (int8_t)bytes[9];            // Offset 4
                int8_t val_autumn = (int8_t)bytes[19];        // Offset 14
                int8_t val_delay = (int8_t)bytes[24];         // Offset 19
                int8_t val_increase = (int8_t)bytes[28];      // Offset 23

                ESP_LOGD("bank", "Bank 0x0C values:");
                ESP_LOGD("bank", "  L1 -20°C: %d°C", val_minus20);
                ESP_LOGD("bank", "  L1 0°C: %d°C", val_zero);
                ESP_LOGD("bank", "  L1 +20°C: %d°C", val_plus20);
                ESP_LOGD("bank", "  L1 Night Effect: %d°C", val_night);
                ESP_LOGD("bank", "  L1 Min Limit: %d°C", val_min);
                ESP_LOGD("bank", "  L1 Max Limit: %d°C", val_max);
                ESP_LOGD("bank", "  L1 Autumn Dry: %d°C", val_autumn);
                ESP_LOGD("bank", "  L1 Out Temp Delay: %d min", val_delay);
                ESP_LOGD("bank", "  L1 Pre-increase: %d°C", val_increase);

                // Update globals
                id(l1_minus20) = val_minus20;
                id(l1_zero) = val_zero;
                id(l1_plus20) = val_plus20;
                id(l1_night_effect) = val_night;
                id(l1_min_limit) = val_min;
                id(l1_max_limit) = val_max;
                id(l1_autumn_dry) = val_autumn;
                id(l1_out_temp_delay) = val_delay;
                id(l1_pre_increase) = val_increase;
              }
              else if (bank == 0x2C) {
                // Parse bank 0x2C values
                int8_t val_summer = (int8_t)bytes[13];        // Offset 8
                ESP_LOGD("bank", "Bank 0x2C values:");
                ESP_LOGD("bank", "  L1 Summer Close: %d°C", val_summer);
                id(l1_summer_close) = val_summer;
              }
              else if (bank == 0x0B) {
                // Parse all values according to their offsets
                int8_t val_control_mode = (int8_t)bytes[15];     // Offset 10
                int8_t val_tank_bottom_min = (int8_t)bytes[10];  // Offset 5
                int8_t val_eh_delay = (int8_t)bytes[11];         // Offset 6
                int8_t val_tank_top_summer = (int8_t)bytes[7];   // Offset 2
                int8_t val_tank_top_winter = (int8_t)bytes[6];   // Offset 1
                int8_t val_extra_heat = (int8_t)bytes[13];       // Offset 8
                int8_t val_extra_heat_time = (int8_t)bytes[14];  // Offset 9
                int8_t val_comp_lock_time = (int8_t)bytes[19];   // Offset 14
                int8_t val_top_eh_diff = (int8_t)bytes[12];      // Offset 7
                int8_t val_bottom_diff = (int8_t)bytes[8];       // Offset 3
                int8_t val_top_diff = (int8_t)bytes[9];          // Offset 4
                int8_t val_dhw_pre_open = (int8_t)bytes[17];     // Offset 12
                uint8_t val_dhw_lock = bytes[18];                // Offset 13 (UINT8)
                int8_t val_brine_alert = (int8_t)bytes[16];      // Offset 11

                // Update all global variables
                id(hp_mode) = val_control_mode;
                id(tank_min) = val_tank_bottom_min;
                id(delay_time) = val_eh_delay;
                id(summer_temp) = val_tank_top_summer;
                id(winter_temp) = val_tank_top_winter;
                id(extra_heating) = val_extra_heat;
                id(extra_time) = val_extra_heat_time;
                id(comp_lock) = val_comp_lock_time;
                id(top_eh_diff) = val_top_eh_diff;
                id(bottom_diff) = val_bottom_diff;
                id(top_diff) = val_top_diff;
                id(dhw_pre) = val_dhw_pre_open;
                id(dhw_lock) = val_dhw_lock;
                id(brine_alert) = val_brine_alert;
              }
            }
          }

interval:
  - interval: 60s
    then:
      # Temperature sensors
      - uart.write: [0x02, 0x81, 0x02, 0x00, 0x12, 0x95] # Outside temp
      - delay: 1s
      - uart.write: [0x02, 0x81, 0x02, 0x00, 0x15, 0x98] # L1 room
      - delay: 1s
      - uart.write: [0x02, 0x81, 0x02, 0x00, 0x14, 0x97] # L1 supply
      - delay: 1s
      - uart.write: [0x02, 0x81, 0x02, 0x00, 0x1B, 0x9E] # Free measurement
      - delay: 1s
      - uart.write: [0x02, 0x81, 0x02, 0x00, 0x18, 0x9B] # Tank top input
      - delay: 1s
      - uart.write: [0x02, 0x81, 0x02, 0x00, 0x21, 0xA4] # Tank top
      - delay: 1s
      - uart.write: [0x02, 0x81, 0x02, 0x00, 0x17, 0x9A] # Tank middle
      - delay: 1s
      - uart.write: [0x02, 0x81, 0x02, 0x00, 0x22, 0xA5] # Tank bottom
      - delay: 1s
      - uart.write: [0x02, 0x81, 0x02, 0x00, 0x19, 0x9C] # Brine
      - delay: 1s

      # Status values - UINT8
      - uart.write: [0x02, 0x81, 0x02, 0x00, 0x31, 0xB4] # L1 valve (49 decimal)
      - delay: 1s
      - uart.write: [0x02, 0x81, 0x02, 0x00, 0x33, 0xB6] # DHW valve (51 decimal)
      - delay: 1s

      # Hours and status - INT16
      - uart.write: [0x02, 0x81, 0x02, 0x00, 0x3A, 0xBD] # Electric heater hours (58 decimal)
      - delay: 1s
      - uart.write: [0x02, 0x81, 0x02, 0x00, 0x3B, 0xBE] # Compressor hours (59 decimal)
      - delay: 1s
      - uart.write: [0x02, 0x81, 0x02, 0x00, 0x2D, 0xB0] # Status word (45 decimal)

      # Banks
      - uart.write: [0x02, 0x81, 0x02, 0x00, 0x0B, 0x8E] # Bank 0x0B
      - delay: 1s
      - uart.write: [0x02, 0x81, 0x02, 0x00, 0x0C, 0x8F] # Bank 0x0C
      - delay: 1s
      - uart.write: [0x02, 0x81, 0x02, 0x00, 0x2C, 0xAF] # Bank 0x2C
      - delay: 1s

api:
  encryption:
    key: "KeJcJgu+Rxltt9texW+BK7HSglnoWZJiX0MQFMZJTbo="

ota:
  - platform: esphome
    password: "1a8a140f3b4b11c15718c8529cf8d32c"

ethernet:
  type: LAN8720
  mdc_pin: GPIO23
  mdio_pin: GPIO18
  clk_mode: GPIO17_OUT
  phy_addr: 0
  power_pin: GPIO12
